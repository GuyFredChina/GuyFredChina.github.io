<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/05/Java%E5%AE%9E%E9%AA%8C/"/>
    <url>/2021/12/05/Java%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构实验</title>
    <link href="/2021/11/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/"/>
    <url>/2021/11/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="呕心沥血的实验"><a href="#呕心沥血的实验" class="headerlink" title="呕心沥血的实验"></a>呕心沥血的实验</h1><hr><h3 id="第一次实验（顺序表）"><a href="#第一次实验（顺序表）" class="headerlink" title="第一次实验（顺序表）"></a>第一次实验（顺序表）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 50</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> data[MaxSize];<br><span class="hljs-keyword">int</span> length;<br>&#125;SqList;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList</span><span class="hljs-params">(SqList*&amp; L, <span class="hljs-keyword">char</span> a[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>L = (SqList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(SqList));<br><span class="hljs-keyword">while</span> (i &lt; n)<br>&#123;<br>L-&gt;data[k] = a[i];<br>i++; k++;<br>&#125;<br>L-&gt;length = k;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList*&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>L = (SqList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(SqList));<br>L-&gt;length = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestroyList</span><span class="hljs-params">(SqList*&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">free</span>(L);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListEmpty</span><span class="hljs-params">(SqList *L)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span>(L-&gt;length == <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ListLength</span><span class="hljs-params">(SqList* L)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span>(L-&gt;length);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispList</span><span class="hljs-params">(SqList* L)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L-&gt;length; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, L-&gt;data[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList* L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">char</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>e = L-&gt;data[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList* L, <span class="hljs-keyword">char</span> e)</span><span class="hljs-comment">//按元素查找</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; L-&gt;length&amp;&amp; L-&gt;data[i] != e)<br>&#123;<br>i++;<br>&#125;<br><span class="hljs-keyword">if</span> (i &gt;= L-&gt;length)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList*&amp; L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">char</span> e)</span>        <span class="hljs-comment">//增加数据元素</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length + <span class="hljs-number">1</span> || L-&gt;length == MaxSize)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>i--;<br><span class="hljs-keyword">for</span> (j = L-&gt;length; j &gt; i; j--)<br>L-&gt;data[j] = L-&gt;data[j - <span class="hljs-number">1</span>];<br>L-&gt;data[i] = e;<br>L-&gt;length++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList*&amp; L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">char</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>i--;<br>e = L-&gt;data[i];<br><span class="hljs-keyword">for</span> (j = i; j &lt; L-&gt;length - <span class="hljs-number">1</span>; j++)<br>L-&gt;data[j] = L-&gt;data[j + <span class="hljs-number">1</span>];<br>L-&gt;length--;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>操作部分</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;sqlist.h&quot;</span><br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>SqList* L;<br><span class="hljs-built_in">char</span> e;<br><span class="hljs-constructor">InitList(L)</span>;<br><span class="hljs-constructor">ListInsert(L, 1, &#x27;<span class="hljs-params">a</span>&#x27;)</span>;<br><span class="hljs-constructor">DispList(L)</span>;<br><span class="hljs-constructor">ListInsert(L, 2, &#x27;<span class="hljs-params">b</span>&#x27;)</span>;<br><span class="hljs-constructor">DispList(L)</span>;<br><span class="hljs-constructor">ListInsert(L, 3, &#x27;<span class="hljs-params">c</span>&#x27;)</span>;<br><span class="hljs-constructor">DispList(L)</span>;<br><span class="hljs-constructor">ListInsert(L, 4, &#x27;<span class="hljs-params">d</span>&#x27;)</span>;<br><span class="hljs-constructor">DispList(L)</span>;<br><span class="hljs-constructor">ListInsert(L, 5, &#x27;<span class="hljs-params">e</span>&#x27;)</span>;<br><span class="hljs-constructor">GetElem(L, 3, <span class="hljs-params">e</span>)</span>;<br><span class="hljs-constructor">DispList(L)</span>;<br><span class="hljs-constructor">ListInsert(L, 4, &#x27;<span class="hljs-params">f</span>&#x27;)</span>;<br><span class="hljs-constructor">DispList(L)</span>;<br><span class="hljs-constructor">ListDelete(L, 3, <span class="hljs-params">e</span>)</span>;<br><span class="hljs-constructor">DispList(L)</span>;<br><span class="hljs-constructor">DestroyList(L)</span>;<br>return <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二次实验（链表）"><a href="#第二次实验（链表）" class="headerlink" title="第二次实验（链表）"></a>第二次实验（链表）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">double</span> coef;<br><span class="hljs-keyword">int</span> <span class="hljs-built_in">exp</span>;<br>&#125; PolyArray;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pnode</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">double</span> coef;<br><span class="hljs-keyword">int</span> <span class="hljs-built_in">exp</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pnode</span> *<span class="hljs-title">next</span>;</span><br>&#125; PolyNode;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Display</span><span class="hljs-params">(PolyNode *L)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">bool</span> first=<span class="hljs-literal">true</span>;<br>PolyNode *p=L-&gt;next;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(first)<br>first = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;coef&gt;<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br><span class="hljs-keyword">if</span>(p-&gt;<span class="hljs-built_in">exp</span>==<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%g&quot;</span>,p-&gt;coef);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;<span class="hljs-built_in">exp</span>==<span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%gx&quot;</span>,p-&gt;coef);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%gx^%d&quot;</span>,p-&gt;coef,p-&gt;<span class="hljs-built_in">exp</span>);<br>p=p-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestroyPoly</span><span class="hljs-params">(PolyNode *&amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>PolyNode *pre=L,*p=pre-&gt;next;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(pre);<br>pre = p;<br>p = pre-&gt;next; <br>&#125;<br><span class="hljs-built_in">free</span>(pre);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreatePolyR</span><span class="hljs-params">(PolyNode *&amp;L,PolyArray a[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>PolyNode *s,*r;<br><span class="hljs-keyword">int</span> i;<br>L=(PolyNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(PolyNode));<br>L-&gt;next = <span class="hljs-literal">NULL</span>;<br>r=L;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>s=(PolyNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(PolyNode));<br>s-&gt;coef = a[i].coef;<br>s-&gt;<span class="hljs-built_in">exp</span> = a[i].<span class="hljs-built_in">exp</span>;<br>r-&gt;next = s;<br>r = s;<br>&#125;<br>r-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span><span class="hljs-params">(PolyNode *&amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>PolyNode *p = L-&gt;next, *pre, *q;<br><span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>q=p-&gt;next;<br>p-&gt;next=<span class="hljs-literal">NULL</span>;<br>p=q;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>q=p-&gt;next;<br>pre=L;<br><span class="hljs-keyword">while</span>(pre-&gt;next!=<span class="hljs-literal">NULL</span> &amp;&amp;pre-&gt;next-&gt;<span class="hljs-built_in">exp</span> &gt; p-&gt;<span class="hljs-built_in">exp</span>)<br>pre = pre-&gt;next;<br>p-&gt;next=pre-&gt;next;<br>pre-&gt;next = p;<br>p=q;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(PolyNode *ha,PolyNode *hb,PolyNode *&amp;hc)</span></span><br><span class="hljs-function"></span>&#123;<br>PolyNode *pa = ha-&gt;next,*pb = hb-&gt;next,*s,*r;<br><span class="hljs-keyword">double</span> c;<br>hc = (PolyNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(PolyNode));<br>r = hc;<br><span class="hljs-keyword">while</span>(pa != <span class="hljs-literal">NULL</span> &amp;&amp; pb!= <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(pa-&gt;<span class="hljs-built_in">exp</span> &gt; pb-&gt;<span class="hljs-built_in">exp</span>)<br>&#123;<br>s = (PolyNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(PolyNode));<br>s-&gt;<span class="hljs-built_in">exp</span> = pa-&gt;<span class="hljs-built_in">exp</span>;<br>s-&gt;coef = pa-&gt;coef;<br>r-&gt;next = s;<br>r = s;<br>pa = pa-&gt;next;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pa-&gt;<span class="hljs-built_in">exp</span> &lt; pb-&gt;<span class="hljs-built_in">exp</span>)<br>&#123;<br>s = (PolyNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(PolyNode));<br>s-&gt;<span class="hljs-built_in">exp</span> = pb-&gt;<span class="hljs-built_in">exp</span>;<br>s-&gt;coef = pb-&gt;coef;<br>r-&gt;next = s;<br>r = s;<br>pb = pb-&gt;next;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>c = pa-&gt;coef + pb-&gt;coef;<br><span class="hljs-keyword">if</span>(c != <span class="hljs-number">0</span>)<br>&#123;<br>s = (PolyNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(PolyNode));<br>s-&gt;<span class="hljs-built_in">exp</span> = pa-&gt;<span class="hljs-built_in">exp</span>;<br>s-&gt;coef = c;<br>r-&gt;next = s;<br>r = s;<br>&#125;<br>pa = pa-&gt;next;<br>pb = pb-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(pb != <span class="hljs-literal">NULL</span>)<br>pa =pb;<br><span class="hljs-keyword">while</span>(pa != <span class="hljs-literal">NULL</span>)<br>&#123;<br>s = (PolyNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(PolyNode));<br>s-&gt;<span class="hljs-built_in">exp</span> = pa-&gt;<span class="hljs-built_in">exp</span>;<br>s-&gt;coef = pa-&gt;coef;<br>r-&gt;next = s;<br>r = s;<br>pa = pa-&gt;next;<br>&#125;<br>r-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>PolyNode *ha,*hb,*hc;<br>PolyArray a[] = &#123;&#123;<span class="hljs-number">1.2</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">2.5</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">3.2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">-2.5</span>,<span class="hljs-number">5</span>&#125;&#125;;<br>PolyArray b[] = &#123;&#123;<span class="hljs-number">-1.2</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">2.5</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">3.2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">2.5</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">5.4</span>,<span class="hljs-number">10</span>&#125;&#125;;<br>CreatePolyR(ha,a,<span class="hljs-number">4</span>);<br>CreatePolyR(hb,b,<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原多项式A:   &quot;</span>);<br>Display(ha);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原多项式B:   &quot;</span>);<br>Display(hb);<br>Sort(ha);<br>Sort(hb);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;有序多项式A:   &quot;</span>);<br>Display(ha);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;有序多项式B:   &quot;</span>);<br>Display(hb);<br>Add(ha,hb,hc);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;多项式相加:   &quot;</span>);<br>Display(hc);<br>DestroyPoly(ha);<br>DestroyPoly(hb);<br>DestroyPoly(hc);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="第三次实验-栈"><a href="#第三次实验-栈" class="headerlink" title="第三次实验(栈)"></a>第三次实验(栈)</h3><p>操作函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linknode</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linknode</span> *<span class="hljs-title">next</span>;</span><br>&#125;ln;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ln *&amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>s = (ln *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ln));<br>s-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(ln *&amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>ln *p =  s-&gt;next;<br><span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(s);<br>s = p;<br>p = p-&gt;next;<br>&#125;<br><span class="hljs-built_in">free</span>(s);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">(ln *s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span>(s-&gt;next == <span class="hljs-literal">NULL</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(ln *&amp;s,<span class="hljs-keyword">char</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>ln *p;<br>p = (ln*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ln));<br>p-&gt;data = e;<br>p-&gt;next = s-&gt;next;<br>s-&gt;next = p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pop</span><span class="hljs-params">(ln *&amp;s,<span class="hljs-keyword">char</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>ln *p;<br><span class="hljs-keyword">if</span>(s-&gt;next == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>p = s-&gt;next;<br>e = p-&gt;data;<br>s-&gt;next = p-&gt;next;<br><span class="hljs-built_in">free</span>(p);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">gettop</span><span class="hljs-params">(ln *s,<span class="hljs-keyword">char</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(s-&gt;next == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>e = s-&gt;next-&gt;data;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;zhan.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;string.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">match</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> e;<br><span class="hljs-keyword">bool</span> match = <span class="hljs-literal">true</span>;<br>ln * s;<br>init(s);<br><span class="hljs-keyword">while</span>(i &lt; n &amp;&amp; match)<br>&#123;<br><span class="hljs-keyword">if</span>(c[i] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>push(s,c[i]);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i] == <span class="hljs-string">&#x27;)&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(gettop(s,e) == <span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(e != <span class="hljs-string">&#x27;(&#x27;</span>)<br>match = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">else</span><br>pop(s,e);<br>&#125;<br><span class="hljs-keyword">else</span> match = <span class="hljs-literal">false</span>;<br>&#125;<br>i++;<br>&#125;<br><span class="hljs-keyword">if</span>(!empty(s))<br>match = <span class="hljs-literal">false</span>;<br>destroy(s);<br><span class="hljs-keyword">return</span> match;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> c[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,c);<br>n = <span class="hljs-built_in">strlen</span>(c);<br><span class="hljs-keyword">if</span>(match(c,n))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;匹配成功&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;匹配失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第四次实验（循环队列）"><a href="#第四次实验（循环队列）" class="headerlink" title="第四次实验（循环队列）"></a>第四次实验（循环队列）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> Number[<span class="hljs-number">100</span>][<span class="hljs-number">3</span>];<br>ElemType Money[<span class="hljs-number">100</span>];<br>ElemType front,rear;<br>&#125;Customer;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Customer *&amp;q)</span></span><br><span class="hljs-function"></span>&#123;<br>q = (Customer*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Customer));<br>q-&gt;front = q-&gt;rear = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dest</span><span class="hljs-params">(Customer *&amp;q)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">(Customer *q)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span>(q-&gt;front == q-&gt;rear);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">en</span><span class="hljs-params">(Customer *&amp;q,ElemType money,<span class="hljs-keyword">char</span> num[<span class="hljs-number">3</span>])</span></span><br><span class="hljs-function"></span>&#123;<br>ElemType i;<br>q-&gt;rear = (q-&gt;rear + <span class="hljs-number">1</span>) % <span class="hljs-number">100</span>;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)<br>&#123;<br>q-&gt;Number[q-&gt;rear][i] = num[i];<br>&#125;<br>q-&gt;Money[q-&gt;rear] = money;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">de</span><span class="hljs-params">(Customer *&amp;q,ElemType &amp;money,<span class="hljs-keyword">char</span> num[<span class="hljs-number">3</span>])</span></span><br><span class="hljs-function"></span>&#123;<br>q-&gt;front = (q-&gt;front + <span class="hljs-number">1</span>) % <span class="hljs-number">100</span>;<br>money = q-&gt;Money[q-&gt;front];<br><span class="hljs-keyword">for</span>(ElemType i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)<br>&#123;<br>num[i] = q-&gt;Number[q-&gt;front][i];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ElemType money,allmon = <span class="hljs-number">10000</span>;<br><span class="hljs-keyword">char</span> num[<span class="hljs-number">3</span>];<br>Customer *q;<br>init(q);<br>en(q,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;A01&quot;</span>);<br>en(q,<span class="hljs-number">-5000</span>,<span class="hljs-string">&quot;A02&quot;</span>);<br>en(q,<span class="hljs-number">-8000</span>,<span class="hljs-string">&quot;A03&quot;</span>);<br>en(q,<span class="hljs-number">-4000</span>,<span class="hljs-string">&quot;A04&quot;</span>);<br>en(q,<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;A05&quot;</span>);<br>en(q,<span class="hljs-number">-6000</span>,<span class="hljs-string">&quot;A06&quot;</span>);<br>en(q,<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;A07&quot;</span>);<br>en(q,<span class="hljs-number">-3000</span>,<span class="hljs-string">&quot;A08&quot;</span>);<br>en(q,<span class="hljs-number">7000</span>,<span class="hljs-string">&quot;A09&quot;</span>);<br>en(q,<span class="hljs-number">5000</span>,<span class="hljs-string">&quot;A10&quot;</span>);<br><span class="hljs-keyword">while</span>(!empty(q))<br>&#123;<br>de(q,money,num);<span class="hljs-comment">//先出队</span><br><span class="hljs-keyword">if</span>(allmon + money &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//如果取钱金额超过银行金额重新入队</span><br>&#123;<br>en(q,money,num);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>allmon += money;<br><span class="hljs-keyword">if</span>(money &gt; <span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号：%s 办理业务金额：%d  即时银行金额：%d\n&quot;</span>,num,money,allmon);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号：%s 办理业务金额：%d 即时银行金额：%d\n&quot;</span>,num,money,allmon);<br>&#125;<br>&#125;<br>dest(q);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第五次实验-顺序串模式匹配算法"><a href="#第五次实验-顺序串模式匹配算法" class="headerlink" title="第五次实验(顺序串模式匹配算法)"></a>第五次实验(顺序串模式匹配算法)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> data[MaxSize];<br><span class="hljs-keyword">int</span> length;<br>&#125; SqString;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StrAssign</span><span class="hljs-params">(SqString &amp;s,<span class="hljs-keyword">char</span> a[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;a[i] != <span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>s.data[i] = a[i];<br>s.length = i;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetNext</span><span class="hljs-params">(SqString t,<span class="hljs-keyword">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> k = <span class="hljs-number">-1</span>;<br>next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(j&lt;t.length<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">-1</span> || t.data[j] == t.data[k])<br>&#123;<br>j++;<br>k++;<br>next[j] = k;<br>&#125;<br><span class="hljs-keyword">else</span> k = next[k];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">weizhi</span><span class="hljs-params">(SqString s,SqString t,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> k;<br><span class="hljs-keyword">int</span> w; <br><span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>;k &lt; i - j;k++)&#123;<br>w = i - j;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;匹配的位置是%d\n&quot;</span>,w);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Count</span><span class="hljs-params">(SqString s,SqString t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> next[MaxSize];<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>,count = <span class="hljs-number">0</span>;<br>GetNext(t,next);<br><span class="hljs-keyword">while</span>(i &lt; s.length &amp;&amp; j &lt; t.length)<br>&#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">-1</span> || s.data[i] == t.data[j])<br>&#123;<br>i++;<br>j++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>j = next[j];<br>&#125;<br><span class="hljs-keyword">if</span>(j == t.length)<br>&#123;<br>weizhi(s,t,i,j);<br>count++;<br>j = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqString s,t;<br>StrAssign(s,<span class="hljs-string">&quot;abcaabcbcaabcbdcbaabcbcadcba&quot;</span>);<br>StrAssign(t,<span class="hljs-string">&quot;abcbca&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;t在s中出现次数:%d\n&quot;</span>,Count(s,t)); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="第六次实验-广义表基本运算算法的应用"><a href="#第六次实验-广义表基本运算算法的应用" class="headerlink" title="第六次实验(广义表基本运算算法的应用)"></a>第六次实验(广义表基本运算算法的应用)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lnode</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> tag;<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lnode</span> * <span class="hljs-title">sublist</span>;</span><br>&#125;val;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lnode</span> *<span class="hljs-title">link</span>;</span><br>&#125;glnode;<br><span class="hljs-function">glnode *<span class="hljs-title">creatgl</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * &amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>glnode *g;<br><span class="hljs-keyword">char</span> ch = *s++;<br><span class="hljs-keyword">if</span>(ch != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>&#123;<br>g = (glnode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(glnode));<br><span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;(&#x27;</span>)<br>&#123;<br>g-&gt;tag = <span class="hljs-number">1</span>;<br>g-&gt;val.sublist = creatgl(s);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;)&#x27;</span>)<br>g = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>g = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>g-&gt;tag = <span class="hljs-number">0</span>;<br>g-&gt;val.data = ch;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>g = <span class="hljs-literal">NULL</span>;<br>ch = * s++;<br><span class="hljs-keyword">if</span>(g != <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;,&#x27;</span>)<br>g-&gt;link = creatgl(s);<br><span class="hljs-keyword">else</span><br>g-&gt;link = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> g;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gllen</span><span class="hljs-params">(glnode * g)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>glnode * g1;<br>g1 = g-&gt;val.sublist;<br><span class="hljs-keyword">while</span>(g1 != <span class="hljs-literal">NULL</span>)<br>&#123;<br>n++;<br>g1 = g1-&gt;link;<br>&#125;<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gldep</span><span class="hljs-params">(glnode *g)</span></span><br><span class="hljs-function"></span>&#123;<br>glnode *g1;<br><span class="hljs-keyword">int</span> maxd = <span class="hljs-number">0</span>,dep;<br><span class="hljs-keyword">if</span>(g-&gt;tag == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>g1 = g-&gt;val.sublist;<br><span class="hljs-keyword">if</span>(g1 == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(g1 != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(g1-&gt;tag == <span class="hljs-number">1</span>)<br>&#123;<br>dep = gldep(g1);<br><span class="hljs-keyword">if</span>(dep &gt; maxd)<br>maxd = dep;<br>&#125;<br>g1 = g1-&gt;link;<br>&#125;<br><span class="hljs-keyword">return</span>(maxd+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dispgl</span><span class="hljs-params">(glnode * g)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(g != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(g-&gt;tag == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,g-&gt;val.data);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(g-&gt;val.sublist == <span class="hljs-literal">NULL</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">else</span><br>dispgl(g-&gt;val.sublist);<br>&#125;<br><span class="hljs-keyword">if</span>(g-&gt;link != <span class="hljs-literal">NULL</span> )<br>&#123;<br>dispgl(g-&gt;link);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">maxatom</span><span class="hljs-params">(glnode *g)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> max1,max2;<br><span class="hljs-keyword">if</span>(g != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(g-&gt;tag == <span class="hljs-number">0</span>)<br>&#123;<br>max1 = maxatom(g-&gt;link);<br><span class="hljs-keyword">return</span>(g-&gt;val.data &gt; max1?g-&gt;val.data:max1);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>max1 = maxatom(g-&gt;val.sublist);<br>max2 = maxatom(g-&gt;link);<br><span class="hljs-keyword">return</span>(max1&gt;max2?max1:max2);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>glnode *g;<br><span class="hljs-keyword">char</span> *str = <span class="hljs-string">&quot;(A,(b,f,(d,(#))),9,(t,(X,Y,Z)))&quot;</span>;<br>g = creatgl(str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;长度:\n%d\n&quot;</span>,gllen(g));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;深度:\n%d\n&quot;</span>,gldep(g));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大原子:\n%c\n&quot;</span>,maxatom(g));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;所有原子:\n&quot;</span>);<br>dispgl(g);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="第七次实验-二叉树基本运算算法的应用"><a href="#第七次实验-二叉树基本运算算法的应用" class="headerlink" title="第七次实验(二叉树基本运算算法的应用)"></a>第七次实验(二叉树基本运算算法的应用)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 50</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>Elemtype data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> * <span class="hljs-title">lchild</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> * <span class="hljs-title">rchild</span>;</span><br>&#125;BTNode;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateBTNode</span><span class="hljs-params">(BTNode *&amp; b, <span class="hljs-keyword">char</span> * str)</span></span><br><span class="hljs-function"></span>&#123;<br>BTNode * St[MaxSize], *p;<br><span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>, k, j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> ch;<br>b = <span class="hljs-literal">NULL</span>;<br>ch = str[j];<br><span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">switch</span> (ch)<br>&#123;<br><span class="hljs-keyword">case</span><span class="hljs-number">&#x27;</span>(<span class="hljs-string">&#x27;:top++; St[top] = p; k = 1; break;</span><br><span class="hljs-string">case&#x27;</span>)<span class="hljs-string">&#x27;:top--; break;</span><br><span class="hljs-string">case&#x27;</span>,<span class="hljs-string">&#x27;:k = 2; break;</span><br><span class="hljs-string">default:p = (BTNode *)malloc(sizeof(BTNode));</span><br><span class="hljs-string">p-&gt;data = ch; p-&gt;lchild = p-&gt;rchild = NULL;</span><br><span class="hljs-string">if (b == NULL)</span><br><span class="hljs-string">b = p;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">switch (k)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">case 1:St[top]-&gt;lchild = p; break;</span><br><span class="hljs-string">case 2:St[top]-&gt;rchild = p; break;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">j++;</span><br><span class="hljs-string">ch = str[j];</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">BTNode *FindNode(BTNode *b, Elemtype x)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">BTNode *p;</span><br><span class="hljs-string">if (b == NULL)</span><br><span class="hljs-string">return NULL;</span><br><span class="hljs-string">else if (b-&gt;data == x)</span><br><span class="hljs-string">return b;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">p = FindNode(b-&gt;lchild, x);</span><br><span class="hljs-string">if (p != NULL)</span><br><span class="hljs-string">return p;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">return FindNode(b-&gt;rchild, x);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">int BTNodeHeight(BTNode *b)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">int lchildh, rchildh;</span><br><span class="hljs-string">if (b == NULL)</span><br><span class="hljs-string">return 0;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">lchildh = BTNodeHeight(b-&gt;lchild);</span><br><span class="hljs-string">rchildh = BTNodeHeight(b-&gt;rchild);</span><br><span class="hljs-string">return (lchildh &gt; rchildh) ? (lchildh + 1) : (rchildh + 1);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">void DispBTNode(BTNode *b)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">if (b != NULL)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">printf(&quot;%c&quot;, b-&gt;data);</span><br><span class="hljs-string">if (b-&gt;lchild != NULL || b-&gt;rchild != NULL)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">printf(&quot;(&quot;);</span><br><span class="hljs-string">DispBTNode(b-&gt;lchild);</span><br><span class="hljs-string">if (b-&gt;rchild != NULL)</span><br><span class="hljs-string">printf(&quot;,&quot;);</span><br><span class="hljs-string">DispBTNode(b-&gt;rchild);</span><br><span class="hljs-string">printf(&quot;)&quot;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">int Leave(BTNode *b)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">if (b == NULL)</span><br><span class="hljs-string">return 0;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">if (b-&gt;lchild == NULL &amp;&amp; b-&gt;rchild == NULL)</span><br><span class="hljs-string">return 1;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">return(Leave(b-&gt;lchild) + Leave(b-&gt;rchild));</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">int Amout(BTNode *b)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">int L = 0;</span><br><span class="hljs-string">int R = 0;</span><br><span class="hljs-string">if (b == NULL)</span><br><span class="hljs-string">return 0;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">L = Amout(b-&gt;lchild);</span><br><span class="hljs-string">R = Amout(b-&gt;rchild);</span><br><span class="hljs-string">return (L + R + 1);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">void pre_order(BTNode * Node)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    if(Node == NULL)</span><br><span class="hljs-string">        return;</span><br><span class="hljs-string">    printf(&quot;%c &quot;, Node-&gt;data);</span><br><span class="hljs-string">    pre_order(Node-&gt;lchild);</span><br><span class="hljs-string">    pre_order(Node-&gt;rchild);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">void middle_order(BTNode *Node)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    if(Node == NULL)</span><br><span class="hljs-string">        return;</span><br><span class="hljs-string">    middle_order(Node-&gt;lchild);</span><br><span class="hljs-string">    printf(&quot;%c &quot;, Node-&gt;data);</span><br><span class="hljs-string">    middle_order(Node-&gt;rchild);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">void post_order(BTNode *Node)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    if(Node == NULL)</span><br><span class="hljs-string">        return; </span><br><span class="hljs-string">    post_order(Node-&gt;lchild);</span><br><span class="hljs-string">    post_order(Node-&gt;rchild);</span><br><span class="hljs-string">    printf(&quot;%c &quot;, Node-&gt;data);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">int SSonNodes(BTNode *b)</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">int num1,num2,n;</span><br><span class="hljs-string">if(b == NULL)</span><br><span class="hljs-string">return 0;</span><br><span class="hljs-string">else if((b-&gt;lchild == NULL &amp;&amp; b-&gt;rchild != NULL) || (b-&gt;lchild != NULL &amp;&amp; b-&gt;rchild == NULL))</span><br><span class="hljs-string">n = 1;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">n = 0;</span><br><span class="hljs-string">num1 = SSonNodes(b-&gt;lchild);</span><br><span class="hljs-string">num2 = SSonNodes(b-&gt;rchild);</span><br><span class="hljs-string">return(num1 + num2 + n);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">int main()</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">BTNode *b, *p, *lp, *rp;</span><br><span class="hljs-string">CreateBTNode(b, &quot;A(B(C(,D),E(F)),G(H(I(J),K(,L)),M(N,P)))&quot;);</span><br><span class="hljs-string">printf(&quot;输出二叉树:&quot;);</span><br><span class="hljs-string">DispBTNode(b);</span><br><span class="hljs-string">printf(&quot;\n&quot;);</span><br><span class="hljs-string">printf(&quot;二叉树b的高度:%d\n&quot;, BTNodeHeight(b));</span><br><span class="hljs-string">printf(&quot;节点个数:%d\n&quot;, Amout(b));</span><br><span class="hljs-string">printf(&quot;叶子节点个数:%d\n&quot;, Leave(b));</span><br><span class="hljs-string">printf(&quot;所有单分支结点数量:%d\n&quot;,SSonNodes(b));</span><br><span class="hljs-string">printf(&quot;先序遍历序列&quot;);</span><br><span class="hljs-string">pre_order(b);</span><br><span class="hljs-string">printf(&quot;\n&quot;);</span><br><span class="hljs-string">printf(&quot;中序遍历序列&quot;);</span><br><span class="hljs-string">middle_order(b);</span><br><span class="hljs-string">printf(&quot;\n&quot;);</span><br><span class="hljs-string">printf(&quot;后序遍历序列&quot;);</span><br><span class="hljs-string">post_order(b);</span><br><span class="hljs-string">printf(&quot;\n&quot;);</span><br><span class="hljs-string">printf(&quot;G为根节点的子树:&quot;);</span><br><span class="hljs-string">p = FindNode(b, &#x27;</span>G<span class="hljs-number">&#x27;</span>);<br>DispBTNode(p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="第八次实验-求带权有向图的最短路径"><a href="#第八次实验-求带权有向图的最短路径" class="headerlink" title="第八次实验(求带权有向图的最短路径)"></a>第八次实验(求带权有向图的最短路径)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 32767</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXV 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> no;<br><span class="hljs-keyword">char</span> info;<br>&#125;VertexType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> edges[MAXV][MAXV];<br><span class="hljs-keyword">int</span> n,e;<br>VertexType vexs[MAXV];<br>&#125;MatGraph;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ANode</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> adjvex;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ANode</span> *<span class="hljs-title">nextarc</span>;</span><br><span class="hljs-keyword">int</span> weight;<br>&#125;ArcNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> info;<br><span class="hljs-keyword">int</span> count;<br>ArcNode * firstarc;<br>&#125;VNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>VNode adjlist[MAXV];<br><span class="hljs-keyword">int</span> n,e;<br>&#125;AdjGraph;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMat</span><span class="hljs-params">(MatGraph &amp;g,<span class="hljs-keyword">int</span> A[MAXV][MAXV],<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br>g.n = n;<br>g.e = e;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; g.n;i++)<br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>;j &lt; g.n;j++)<br>g.edges[i][j] = A[i][j];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispMat</span><span class="hljs-params">(MatGraph g)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; g.n;i++)&#123;<br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>;j &lt; g.n;j++)<br><span class="hljs-keyword">if</span>(g.edges[i][j] != INF)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>,g.edges[i][j]);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4s&quot;</span>,<span class="hljs-string">&quot;∞&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateAdj</span><span class="hljs-params">(AdjGraph *&amp;G,<span class="hljs-keyword">int</span> A[MAXV][MAXV],<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br>ArcNode *p;<br>G = (AdjGraph *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(AdjGraph));<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; n;i++)<br>G-&gt;adjlist[i].firstarc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; n;i++)<br><span class="hljs-keyword">for</span>(j = n - <span class="hljs-number">1</span>;j &gt;= <span class="hljs-number">0</span>;j--)<br><span class="hljs-keyword">if</span>(A[i][j] != <span class="hljs-number">0</span> &amp;&amp; A[i][j] != INF)<br>&#123;<br>p = (ArcNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ArcNode));<br>p-&gt;adjvex = j;<br>p-&gt;weight = A[i][j];<br>p-&gt;nextarc = G-&gt;adjlist[i].firstarc;<br>G-&gt;adjlist[i].firstarc = p;<br>&#125;<br>G-&gt;n = n;<br>G-&gt;e = n;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispAdj</span><span class="hljs-params">(AdjGraph *G)</span></span><br><span class="hljs-function"></span>&#123;<br>ArcNode *p;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; G-&gt;n;i++)<br>&#123;<br>p = G-&gt;adjlist[i].firstarc;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d:&quot;</span>,i);<br><span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d[%d]→&quot;</span>,p-&gt;adjvex,p-&gt;weight);<br>p = p-&gt;nextarc;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;∧\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dispath</span><span class="hljs-params">(MatGraph g,<span class="hljs-keyword">int</span> dist[],<span class="hljs-keyword">int</span> path[],<span class="hljs-keyword">int</span> S[],<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j,k;<br><span class="hljs-keyword">int</span> apath[MAXV],d;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; g.n;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;从顶点%d到顶点%d的路径长度为：%d\t路径为：&quot;</span>,v,i,dist[i]);<br>d = <span class="hljs-number">0</span>;<br>apath[d] = k;<br>k = path[i];<br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">-1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wu\n&quot;</span>);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">while</span>(k != v)<br>&#123;<br>d++;<br>apath[d] = k;<br>k = path[k];<br>&#125;<br>d++;<br>apath[d] = v;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,apath[d]);<br><span class="hljs-keyword">for</span>(j = d - <span class="hljs-number">1</span>;j &gt;= <span class="hljs-number">0</span>;j--)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;,%d&quot;</span>,apath[j]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(MatGraph g,<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> dist[MAXV],path[MAXV];<br><span class="hljs-keyword">int</span> S[MAXV];<br><span class="hljs-keyword">int</span> Mindis,i,j,u;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; g.n;i++)<br>&#123;<br>dist[i] = g.edges[v][i];<br>S[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(g.edges[v][i] &lt; INF)<br>path[i] = v;<br><span class="hljs-keyword">else</span><br>path[i] = <span class="hljs-number">-1</span>;<br>&#125; <br>S[v] = <span class="hljs-number">1</span>;<br>path[v] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; g.n - <span class="hljs-number">1</span>;i++)<br>&#123;<br>Mindis = INF;<br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>;j &lt; g.n;j++)<br><span class="hljs-keyword">if</span>(S[j] == <span class="hljs-number">0</span> &amp;&amp; dist[j] &lt; Mindis)<br>&#123;<br>u = j;<br>Mindis = dist[j];<br>&#125;<br>S[u] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>;j &lt; g.n;j++)<br><span class="hljs-keyword">if</span>(S[j] == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span>(g.edges[u][j] &lt; INF &amp;&amp; dist[u] + g.edges[u][j] &lt; dist[j])<br>&#123;<br>dist[j] = dist[u] + g.edges[u][j];<br>path[j] = u;<br>&#125;<br>&#125;<br>Dispath(g,dist,path,S,v);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MatGraph g;<br>AdjGraph * G;<br><span class="hljs-keyword">int</span> A[MAXV][MAXV] = &#123;<br>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,INF,INF,<span class="hljs-number">3</span>,INF&#125;,<br>&#123;INF,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,INF,INF,INF&#125;,<br>&#123;<span class="hljs-number">8</span>,INF,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,INF,INF&#125;,<br>&#123;<span class="hljs-number">3</span>,INF,INF,<span class="hljs-number">0</span>,INF,<span class="hljs-number">2</span>&#125;,<br>&#123;INF,INF,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,INF&#125;,<br>&#123;INF,INF,INF,INF,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;<br>&#125;;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">6</span>,e = <span class="hljs-number">10</span>,v = <span class="hljs-number">0</span>;<br>CreateMat(g,A,n,e);<br>DispMat(g);<br>CreateAdj(G,A,n,e);<br>DispAdj(G);<br>Dijkstra(g,v);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="第九次实验（二叉排序树）"><a href="#第九次实验（二叉排序树）" class="headerlink" title="第九次实验（二叉排序树）"></a>第九次实验（二叉排序树）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br><span class="hljs-keyword">int</span> key;<br><span class="hljs-keyword">char</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span><br>&#125;BSTNode;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispBST</span><span class="hljs-params">(BSTNode *b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertBST</span><span class="hljs-params">(BSTNode *&amp;bt,<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(bt == <span class="hljs-literal">NULL</span>)<br>&#123;<br>bt = (BSTNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BSTNode));<br>bt-&gt;key = k;<br>bt-&gt;lchild = bt-&gt;rchild = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == bt-&gt;key)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k &lt; bt-&gt;key)<br><span class="hljs-keyword">return</span> InsertBST(bt-&gt;lchild,k);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> InsertBST(bt-&gt;rchild,k);<br>&#125;<br><span class="hljs-function">BSTNode * <span class="hljs-title">CreateBST</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>BSTNode * bt = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i &lt; n)<br><span class="hljs-keyword">if</span>(InsertBST(bt,A[i]) == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d步,插入%d:&quot;</span>,i + <span class="hljs-number">1</span>,A[i]);<br>DispBST(bt);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> bt;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Delete1</span><span class="hljs-params">(BSTNode * p,BSTNode *&amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>BSTNode * q;<br><span class="hljs-keyword">if</span>(r-&gt;rchild != <span class="hljs-literal">NULL</span>)<br>Delete1(p,r-&gt;rchild);<br><span class="hljs-keyword">else</span><br>&#123;<br>p-&gt;key = r-&gt;key;<br>p-&gt;data = r-&gt;data;<br>q = r;<br>r = r-&gt;lchild;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(BSTNode *&amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>BSTNode *q;<br><span class="hljs-keyword">if</span>(p-&gt;rchild == <span class="hljs-literal">NULL</span>)<br>&#123;<br>q = p;<br>p = p-&gt;lchild;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p-&gt;lchild == <span class="hljs-literal">NULL</span>)<br>&#123;<br>q = p;<br>p = p-&gt;rchild;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br><span class="hljs-keyword">else</span> Delete1(p,p-&gt;lchild);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteBST</span><span class="hljs-params">(BSTNode *&amp;bt,<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(bt == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(k &lt; bt-&gt;key)<br><span class="hljs-keyword">return</span> DeleteBST(bt-&gt;lchild,k);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k &gt; bt-&gt;key)<br><span class="hljs-keyword">return</span> DeleteBST(bt-&gt;rchild,k);<br><span class="hljs-keyword">else</span><br>&#123;<br>Delete(bt);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">SearchBST</span><span class="hljs-params">(BSTNode * bt,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br><span class="hljs-keyword">if</span>(bt == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == bt-&gt;key)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,bt-&gt;key);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &lt; bt-&gt;key)<br>SearchBST(bt-&gt;lchild,k); <br><span class="hljs-keyword">else</span><br>SearchBST(bt-&gt;rchild,k);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,bt-&gt;key);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispBST</span><span class="hljs-params">(BSTNode * bt)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(bt != <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,bt-&gt;key);<br><span class="hljs-keyword">if</span>(bt-&gt;lchild != <span class="hljs-literal">NULL</span> || bt-&gt;rchild != <span class="hljs-literal">NULL</span>) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<br>DispBST(bt-&gt;lchild);<br><span class="hljs-keyword">if</span>(bt-&gt;rchild != <span class="hljs-literal">NULL</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>DispBST(bt-&gt;rchild);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BSTNode * bt;<br><span class="hljs-keyword">int</span> path[MaxSize];<br><span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>&#125;,n = <span class="hljs-number">11</span>;<br>bt = CreateBST(a,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;二叉排序树\n&quot;</span>);<br>DispBST(bt);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查找节点10和其路径:&quot;</span>); <br>SearchBST(bt,<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入关键值为11的节点: &quot;</span>); <br>InsertBST(bt,<span class="hljs-number">11</span>);<br>DispBST(bt);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除关键值为4节点: &quot;</span>);<br>DeleteBST(bt,<span class="hljs-number">4</span>);<br>DispBST(bt);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除关键值为9的节点: &quot;</span>);<br>DeleteBST(bt,<span class="hljs-number">9</span>);<br>DispBST(bt);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第十次实验（快速排序和堆排序）"><a href="#第十次实验（快速排序和堆排序）" class="headerlink" title="第十次实验（快速排序和堆排序）"></a>第十次实验（快速排序和堆排序）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXL 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> KeyType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> InfoType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>KeyType key;<br>InfoType data;<br>&#125;RecType;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(RecType &amp;x, RecType &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>RecType tmp = x;<br>x = y;<br>y = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList</span><span class="hljs-params">(RecType R[],KeyType keys[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)<br>R[i].key = keys[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispList</span><span class="hljs-params">(RecType R[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, R[i].key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList1</span><span class="hljs-params">(RecType R[],KeyType keys[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>R[i].key = keys[i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispList1</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,R[i].key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">disppart</span><span class="hljs-params">(RecType R[], <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d次划分:&quot;</span>,i);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>;j &lt; s;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-keyword">for</span>(j = s;j &lt;= t;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,R[j].key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>i++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = s,j = t;<br>RecType tmp = R[i];<br><span class="hljs-keyword">while</span>(i &lt; j)<br>&#123;<br><span class="hljs-keyword">while</span>(j &gt; i &amp;&amp; R[j].key &gt;= tmp.key)<br>j--;<br>R[i] = R[j];<br><span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; R[i].key &lt;= tmp.key)<br>i++;<br>R[j] = R[i];<br>&#125;<br>R[i] = tmp;<br>disppart(R,s,t);<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">if</span> (s &lt; t)<br>&#123;<br>i = partition(R,s,t);<br>QuickSort(R,s,i - <span class="hljs-number">1</span>);<br>QuickSort(R,i + <span class="hljs-number">1</span>,t);<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispHeap</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (i &lt;= n)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,R[i].key);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * i &lt;= n || <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span> &lt; n)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * i &lt;= n)<br>DispHeap(R,<span class="hljs-number">2</span> * i,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span> &lt;= n)<br>DispHeap(R,<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sift</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = low,j = <span class="hljs-number">2</span> * i;<br>RecType temp = R[i];<br><span class="hljs-keyword">while</span>(j &lt;= high)<br>&#123;<br><span class="hljs-keyword">if</span>(j &lt; high &amp;&amp; R[j].key &lt; R[j + <span class="hljs-number">1</span>].key)<br>j++;<br><span class="hljs-keyword">if</span>(temp.key &lt; R[j].key)<br>&#123;<br>R[i] = R[j];<br>i = j;<br>j = <span class="hljs-number">2</span> * i;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>R[i] = temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">for</span>(i = n / <span class="hljs-number">2</span>;i &gt;= <span class="hljs-number">1</span>;i--)<br>Sift(R,i,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始堆:&quot;</span>);<br>DispHeap(R,<span class="hljs-number">1</span>,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <br><span class="hljs-keyword">for</span>(i = n;i &gt;= <span class="hljs-number">2</span>;i--)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d趟排序:&quot;</span>,count++);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;交换 %d 与 %d ,输出 %d &quot;</span>,R[i].key,R[<span class="hljs-number">1</span>].key,R[<span class="hljs-number">1</span>].key);<br>swap(R[<span class="hljs-number">1</span>], R[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序结果:&quot;</span>);<br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>;j &lt;= n;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d &quot;</span>,R[j].key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>Sift(R,<span class="hljs-number">1</span>,i - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;筛选调整得到堆:&quot;</span>);<br>DispHeap(R,<span class="hljs-number">1</span>,i - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>RecType R[MAXL];<br>KeyType a[] = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>&#125;;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">11</span>;<br>CreateList(R,a,n);<br>DispList(R,n);<br>QuickSort(R,<span class="hljs-number">0</span>,n - <span class="hljs-number">1</span>);<br>DispList(R,n);<br>RecType S[MAXL];<br>KeyType b[] = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>&#125;;<br>CreateList1(S,b,<span class="hljs-number">11</span>);<br>DispList1(S,<span class="hljs-number">11</span>);<br>HeapSort(S,<span class="hljs-number">11</span>);<br>DispList1(S,<span class="hljs-number">11</span>);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXL 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> KeyType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> InfoType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>KeyType key;<br>InfoType data;<br>&#125;RecType;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(RecType &amp;x, RecType &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>RecType tmp = x;<br>x = y;<br>y = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList</span><span class="hljs-params">(RecType R[],KeyType keys[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)<br>R[i].key = keys[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispList</span><span class="hljs-params">(RecType R[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, R[i].key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList1</span><span class="hljs-params">(RecType R[],KeyType keys[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>R[i].key = keys[i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispList1</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,R[i].key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">disppart</span><span class="hljs-params">(RecType R[], <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;µÚ%d´Î»®·Ö:&quot;</span>,i);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>;j &lt; s;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-keyword">for</span>(j = s;j &lt;= t;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,R[j].key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>i++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = s,j = t;<br>RecType tmp = R[i];<br><span class="hljs-keyword">while</span>(i &lt; j)<br>&#123;<br><span class="hljs-keyword">while</span>(j &gt; i &amp;&amp; R[j].key &gt;= tmp.key)<br>j--;<br>R[i] = R[j];<br><span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; R[i].key &lt;= tmp.key)<br>i++;<br>R[j] = R[i];<br>&#125;<br>R[i] = tmp;<br>disppart(R,s,t);<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">if</span> (s &lt; t)<br>&#123;<br>i = partition(R,s,t);<br>QuickSort(R,s,i - <span class="hljs-number">1</span>);<br>QuickSort(R,i + <span class="hljs-number">1</span>,t);<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DispHeap</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (i &lt;= n)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,R[i].key);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * i &lt;= n || <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span> &lt; n)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * i &lt;= n)<br>DispHeap(R,<span class="hljs-number">2</span> * i,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span> &lt;= n)<br>DispHeap(R,<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sift</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i = low,j = <span class="hljs-number">2</span> * i;<br>RecType temp = R[i];<br><span class="hljs-keyword">while</span>(j &lt;= high)<br>&#123;<br><span class="hljs-keyword">if</span>(j &lt; high &amp;&amp; R[j].key &lt; R[j + <span class="hljs-number">1</span>].key)<br>j++;<br><span class="hljs-keyword">if</span>(temp.key &lt; R[j].key)<br>&#123;<br>R[i] = R[j];<br>i = j;<br>j = <span class="hljs-number">2</span> * i;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>R[i] = temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(RecType R[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">for</span>(i = n / <span class="hljs-number">2</span>;i &gt;= <span class="hljs-number">1</span>;i--)<br>Sift(R,i,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;³õÊ¼¶Ñ:&quot;</span>);<br>DispHeap(R,<span class="hljs-number">1</span>,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <br><span class="hljs-keyword">for</span>(i = n;i &gt;= <span class="hljs-number">2</span>;i--)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;µÚ%d ÌËÅÅÐò:&quot;</span>,count++);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;½»»» %d Óë %d ,Êä³ö %d &quot;</span>,R[i].key,R[<span class="hljs-number">1</span>].key,R[<span class="hljs-number">1</span>].key);<br>swap(R[<span class="hljs-number">1</span>], R[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ÅÅÐò½á¹û:&quot;</span>);<br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>;j &lt;= n;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d &quot;</span>,R[j].key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>Sift(R,<span class="hljs-number">1</span>,i - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;É¸Ñ¡µ÷ÕûµÃµ½¶Ñ:&quot;</span>);<br>DispHeap(R,<span class="hljs-number">1</span>,i - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>RecType R[MAXL];<br>KeyType a[] = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>&#125;;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">11</span>;<br>CreateList(R,a,n);<br>DispList(R,n);<br>QuickSort(R,<span class="hljs-number">0</span>,n - <span class="hljs-number">1</span>);<br>DispList(R,n);<br>RecType S[MAXL];<br>KeyType b[] = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>&#125;;<br>CreateList1(S,b,<span class="hljs-number">11</span>);<br>DispList1(S,<span class="hljs-number">11</span>);<br>HeapSort(S,<span class="hljs-number">11</span>);<br>DispList1(S,<span class="hljs-number">11</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据集的制作和处理</title>
    <link href="/2021/10/31/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <url>/2021/10/31/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>​    </p><h2 id="数据集的制作与处理"><a href="#数据集的制作与处理" class="headerlink" title="数据集的制作与处理"></a>数据集的制作与处理</h2><h3 id="图像的标注"><a href="#图像的标注" class="headerlink" title="图像的标注"></a>图像的标注</h3><p>所用工具：Yolo_mark，visual studio2019</p><p>所需环境：OpenCV</p><h4 id="OpenCV的安装"><a href="#OpenCV的安装" class="headerlink" title="OpenCV的安装"></a>OpenCV的安装</h4><p>到OpenCV官网下载所需版本，点击Library，然后选择Windows（这里根据自己系统选择）。点击Windows后跳出下载界面，等待5s自动下载。<a href="https://opencv.org/">OpenCV官网</a></p><p>然后双击下载的文件，选择好路径并记住文件位置，点击Extract解压完成后是一个文件夹。（其中build是OpenCV使用时要用到的一些库文件，而sources中则是OpenCV官方为我们提供的一些demo示例源码）。</p><p>然后是配置环境变量，把OpenCV文件夹放好地方后，依次选择计算机—&gt;属性—&gt;高级系统设置—&gt;环境变量，找到Path变量，选中并点击编辑，然后新建把你的OpenCV执行文件的路径填进去，然后一路点确定，这样环境变量就配置完了。然后找OpenCV的执行文件，找到你解压好的OpenCV文件夹，依次选择build—&gt;x64—&gt;vc15—&gt;bin，然后点击剪切板三个字下面的的文件夹图标，双击右边的路径，选择然后复制，你就得到了路径。<a href="https://blog.csdn.net/maizousidemao/article/details/81474834">大佬的详细教程</a></p><h4 id="Yolo-mark的安装及使用"><a href="#Yolo-mark的安装及使用" class="headerlink" title="Yolo_mark的安装及使用"></a>Yolo_mark的安装及使用</h4><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p>从GitHub获取代码，在你想安装的目标文件夹下，在路径框那里双击全选然后输入cmd，回车。（这样方便找到你下载的文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:AlexeyAB/Yolo_mark.git</span><br></pre></td></tr></table></figure><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>visual studio打开yolo_mark.sln，然后配置正确的opencv包含目录,库目录和添加附加依赖项。</p><p>添加包含目录<br>首先要在“解决方案”中选中你的项目名称，如图中绿色框所示。<br>　　然后，依次选择 项目—&gt;属性—&gt;VC++目录—&gt;包含目录—&gt;编辑<br>　　找到你的包含目录添加就可以了，最好添加三个，我的是这样的：<br>　　D:\opencv\build\include<br>　　D:\opencv\build\include\opencv2</p><p>添加库目录<br>　　依次选择项目—&gt;属性—&gt;VC++目录—&gt;库目录—&gt;编辑<br>　　我的是D:\opencv\build\x64\vc15\lib</p><p>添加附加依赖项</p><p>​        依次选择项目—&gt;属性—&gt;链接器—&gt;输入—&gt;附加依赖项—&gt;编辑<br>　　添加你的库文件名，我的是 opencv_world454d.lib（因为我们是要用到Release编译，并且我不确定这一步要不要，我直接复制的文件名）。</p><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>进入到Yolo_mark\x64\Release路径下，按照老办法打开CMD，执行yolo_mark.cmd就可以打开软件了。</p><h5 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h5><p>当对图片标注后就换出现一个TXT文本，文本的内容是坐标信息，第一个数字代表类别，后面的四个数据是标注框的信息，分别是标注框中心点的x，y坐标，标注框的宽w，高h。每一行是一个标注对象，如果一张图片中有多个目标，则txt就对应有多少行。</p><p>h可以看到快捷键是什么，移动object可以更换标注类别。剩下的就交给你自己探索啦。</p><p><a href="https://blog.csdn.net/heiheiya/article/details/83506913">Yolo_mark安装及使用教学</a></p><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客的搭建</title>
    <link href="/2021/10/31/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/31/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>​        在几天的努力下我也终于搭好了我自己的博客，在搭建的同时我参考了同学的博客也参考了网上大佬的博客并且寻找了UP主的视频，经历了千难万险终于搭建出来了。</p><h3 id="Hexo的搭建步骤"><a href="#Hexo的搭建步骤" class="headerlink" title="Hexo的搭建步骤"></a>Hexo的搭建步骤</h3><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><p>​        用来管理hexo博客和上传的工具，Git Bash可以替代windows本身的命令行，因为cmd实在太难用了。</p><p>Windows：到git官网下载，点击Download下载即可。</p><p><a href="https://git-scm.com/">Git官网地址</a></p><p>Linux：输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>​        安装好后验证一下，win10按住win和R键，然后输入cmd，在cmd中输入git –version，如果输出是版本号则正确。</p><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p>Windows：进入官网下载，建议选择左边的，毕竟他自己也写着推荐给绝大部分用户。</p><p><a href="https://nodejs.org/en/">Node.js官网</a></p><p>注：这里下载.msi文件，最好不要安装zip，不然要自己配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令，检查是否安装成功（window，linux都适用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h3><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后和上面同理，用hexo -v查看一下版本，确认是否安装成功。</p><p>然后初始化hexo（这里的myblog可以替换成任何名字）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myblog //进入这个myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><p>接着输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>如果想关掉服务就使用Ctrl+C。</p><h3 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h3><p>首先注册一个GitHub账号，点下面链接看注册教程</p><p><a href="https://www.bilibili.com/read/cv5107169/">超详细注册教学</a></p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库。</p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。然后点击create repository。</p><h3 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h3><p>回到你的git bash中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车，我数了一下好像是4个回车。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>进入C盘，然后进入用户文件夹，然后选择你电脑的用户名的文件夹（如果你没改便是administrator），找到.ssh文件夹。找到id_rsa.pub，打开方式用记事本进去就行（记事本永远的神），Ctrl+A全选然后Ctrl+C复制。</p><p>而后在GitHub的setting中（这个在你的头像那），找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p>在gitbash中，查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果输出了successfully authenticated，那就代表绑定成功。</p><h3 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6.将hexo部署到GitHub"></a>6.将hexo部署到GitHub</h3><p>打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为（这里的YourgithubName就是你的GitHub账户名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: main//(这里我看大佬们的教程都是写的master，但是由于GitHub规则的更新，默认分支已经不是master而是main，所以这里输入main，不然你会看着仓库里的两个分支发呆的)</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate//可以用hexo g替代</span><br><span class="line">hexo deploy//可以用hexo d替代</span><br></pre></td></tr></table></figure><p>如果hexo d后看见Deploy done:git就代表部署成功</p><p>注:deploy时可能要你输入username和password，由于GitHub规则更新这里的密码不是你的账户密码，而是令牌。进入github-&gt;Developer settings-&gt;personal access tokens-&gt;generate new token，note可以随便填，其他的可以全部勾上，然后generate token来创建一个新的令牌，这个令牌建议截图或者复制保存下来，因为他只会出现一次（作者本人没出现这个要密码的情况，那是最好的少麻烦一点）。</p><p>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>​        我在搭这个博客时真的真的遇上了好多问题，其他的步骤都没有问题，就是通过网址进入博客时出了问题，找了很久都没有解决，直到今天我删除了我之前刚创建账号时乱搞的仓库才弄好。希望大家能够一次性弄好，开心的搭起自己的博客。</p><p>参考资料：<br><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029/"> hexo搭建教程（只不过有点老）</a></p><p><a href="https://shier1.github.io/">另一个大佬的经验（也就是我开头提到的同学）</a></p><p><a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=5&amp;spm_id_from=pageDriver">B站详细视频教学（这个还挺新的）</a>(同学经验，许多问题在评论区找答案有奇效)</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
